name: CI Unix Static Sanitized
on:
  push:
  pull_request:
    paths:
      - '.github/workflows/ci-unix-static-sanitized.yml'
      - '**CMakeLists.txt'
      - 'cmake/**'
      - 'ext/**'

permissions:
  contents: read

jobs:
  build-static-sanitized:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        sanitizer: [ address, thread, undefined ] # TODO(yguyon): Add memory

    env:
      CC: clang
      CXX: clang++

    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Setup cmake
        if: runner.os == 'Linux'
        uses: jwlawson/actions-setup-cmake@802fa1a2c4e212495c05bf94dba2704a92a472be # v2.0.2
        with:
          # CMake version 3.17 is required to build libwebp (which libsharpyuv is part of) on macOS.
          cmake-version: '3.17.x'
      - uses: ilammy/setup-nasm@13cbeb366c45c4379d3478cdcbadd8295feb5028 # v1.5.1
      - uses: seanmiddleditch/gha-setup-ninja@8b297075da4cd2a5f1fd21fe011b499edf06e9d2 # v4
      - run: pip install meson
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install aom dav1d imagemagick libpng
      - name: Cache external dependencies
        id: cache-ext
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ext, build/_deps
          key: ${{ runner.os }}-${{ matrix.sanitizer }}-unix-static-sanitized-${{ hashFiles('cmake/Modules/*', 'ext/*.cmd', 'ext/*.sh') }}
      - name: Build aom
        if: steps.cache-ext.outputs.cache-hit != 'true'
        working-directory: ./ext
        run: >
          sed -i -e 's/cmake -G Ninja \(.*\) \.\./cmake -G Ninja \1 -DSANITIZE=${{ matrix.sanitizer }} ../g' aom.cmd

          ./aom.cmd
      - name: Build dav1d
        if: steps.cache-ext.outputs.cache-hit != 'true'
        working-directory: ./ext
        run: >
          sed -i -e 's/meson setup \(.*\) \.\./meson setup \1 -Db_sanitize=${{ matrix.sanitizer }} -Db_lundef=false ../g' dav1d.cmd

          ./dav1d.cmd
      - name: Build libyuv
        if: steps.cache-ext.outputs.cache-hit != 'true'
        working-directory: ./ext
        run: ./libyuv.cmd
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build libsharpyuv
        if: steps.cache-ext.outputs.cache-hit != 'true'
        working-directory: ./ext
        run: ./libsharpyuv.cmd
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build GoogleTest
        if: steps.cache-ext.outputs.cache-hit != 'true'
        working-directory: ./ext
        # Note: "apt install googletest" is sometimes insufficient for find_package(GTest) so build in ext/ instead.
        run: bash -e googletest.cmd

      - name: Prepare libavif (cmake)
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF
          -DAVIF_CODEC_AOM=LOCAL -DAVIF_CODEC_DAV1D=LOCAL
          -DAVIF_LIBYUV=LOCAL -DAVIF_LIBSHARPYUV=LOCAL
          -DAVIF_BUILD_EXAMPLES=ON -DAVIF_BUILD_APPS=ON
          -DAVIF_BUILD_TESTS=ON -DAVIF_ENABLE_GTEST=ON -DAVIF_GTEST=LOCAL
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build libavif (ninja)
        working-directory: ./build
        run: ninja
      - name: Run AVIF Tests
        working-directory: ./build
        run: ctest -j $(getconf _NPROCESSORS_ONLN) --output-on-failure
        env:
          ASAN_OPTIONS: allocator_may_return_null=1
          TSAN_OPTIONS: allocator_may_return_null=1
