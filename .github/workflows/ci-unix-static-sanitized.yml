name: CI Unix Static Sanitized
on:
  push:
  pull_request:
    paths:
      - ".github/workflows/ci-unix-static-sanitized.yml"
      - "**CMakeLists.txt"
      - "cmake/**"
      - "ext/**"

permissions:
  contents: read

jobs:
  build-static-sanitized:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        sanitizer: [address, thread, undefined] # TODO(yguyon): Add memory

    env:
      CC: clang
      CXX: clang++

    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - uses: ./.github/actions/setup-linux
        if: runner.os == 'Linux'
        id: setup_linux
        with:
          codec-aom: "LOCAL"
          codec-dav1d: "LOCAL"
          libyuv: "LOCAL"
          extra-cache-key: ${{ matrix.sanitizer }}
      - uses: ./.github/actions/setup-macos
        if: runner.os == 'macOS'
        id: setup_macos
        with:
          codec-aom: "LOCAL"
          codec-dav1d: "LOCAL"
          extra-cache-key: ${{ matrix.sanitizer }}
      - id: cache-hit
        run: echo "hit=${{ (runner.os == 'Linux' && steps.setup_linux.outputs.ext-cache-hit == 'true') || (runner.os == 'macOS' && steps.setup_macos.outputs.ext-cache-hit == 'true') }}" >> "$GITHUB_OUTPUT"

      - name: Build aom
        if: ${{ steps.cache-hit.outputs.hit == 'false' }}
        working-directory: ./ext
        run: >
          sed -i -e 's/cmake -G Ninja \(.*\) \.\./cmake -G Ninja \1 -DSANITIZE=${{ matrix.sanitizer }} ../g' aom.cmd

          ./aom.cmd
      - name: Build dav1d
        if: ${{ steps.cache-hit.outputs.hit == 'false' }}
        working-directory: ./ext
        run: >
          sed -i -e 's/meson setup \(.*\) \.\./meson setup \1 -Db_sanitize=${{ matrix.sanitizer }} -Db_lundef=false ../g' dav1d.cmd

          ./dav1d.cmd
      - name: Build libyuv
        if: ${{ steps.cache-hit.outputs.hit == 'false' }}
        working-directory: ./ext
        run: ./libyuv.cmd
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build libsharpyuv
        if: ${{ steps.cache-hit.outputs.hit == 'false' }}
        working-directory: ./ext
        run: ./libsharpyuv.cmd
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build GoogleTest
        if: ${{ steps.cache-hit.outputs.hit == 'false' }}
        working-directory: ./ext
        # Note: "apt install googletest" is sometimes insufficient for find_package(GTest) so build in ext/ instead.
        run: bash -e googletest.cmd

      - name: Prepare libavif (cmake)
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF
          -DAVIF_CODEC_AOM=LOCAL -DAVIF_CODEC_DAV1D=LOCAL
          -DAVIF_LIBYUV=LOCAL -DAVIF_LIBSHARPYUV=LOCAL
          -DAVIF_BUILD_EXAMPLES=ON -DAVIF_BUILD_APPS=ON
          -DAVIF_BUILD_TESTS=ON -DAVIF_ENABLE_GTEST=ON -DAVIF_GTEST=LOCAL
        env:
          CFLAGS: -fsanitize=${{ matrix.sanitizer }}
          CXXFLAGS: -fsanitize=${{ matrix.sanitizer }}
          LDFLAGS: -fsanitize=${{ matrix.sanitizer }}
      - name: Build libavif (ninja)
        working-directory: ./build
        run: ninja
      - name: Run AVIF Tests
        working-directory: ./build
        run: ctest -j $(getconf _NPROCESSORS_ONLN) --output-on-failure
        env:
          ASAN_OPTIONS: allocator_may_return_null=1
          TSAN_OPTIONS: allocator_may_return_null=1
